{
  "version": 3,
  "sources": ["../../node_modules/partysocket/dist/chunk-KQKM3KLR.mjs", "../../node_modules/partysocket/dist/chunk-KLZNPLSY.mjs", "../../src/client.js"],
  "sourcesContent": ["// src/ws.ts\nif (!globalThis.EventTarget || !globalThis.Event) {\n  console.error(`\n  PartySocket requires a global 'EventTarget' class to be available!\n  You can use the 'event-target-shim' package to polyfill this. See https://www.npmjs.com/package/event-target-shim. \n  First, run:\n  \\`\\`\\`\n  npm install event-target-shim\n  \\`\\`\\`\n  Then, add this in your code:\n  \\`\\`\\`\n  import {Event, EventTarget} from 'event-target-shim';\n  if(!globalThis.Event) {\n    globalThis.Event = Event;\n  }\n  if(!globalThis.EventTarget) {\n    globalThis.EventTarget = EventTarget;\n  }\n  \\`\\`\\`\n  Please file an issue at https://github.com/partykit/partykit if you're still having trouble.\n`);\n}\nvar ErrorEvent = class extends Event {\n  message;\n  error;\n  constructor(error, target) {\n    super(\"error\", target);\n    this.message = error.message;\n    this.error = error;\n  }\n};\nvar CloseEvent = class extends Event {\n  code;\n  reason;\n  wasClean = true;\n  constructor(code = 1e3, reason = \"\", target) {\n    super(\"close\", target);\n    this.code = code;\n    this.reason = reason;\n  }\n};\nvar Events = {\n  Event,\n  ErrorEvent,\n  CloseEvent\n};\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw new Error(msg);\n  }\n}\nfunction cloneEventBrowser(e) {\n  return new e.constructor(e.type, e);\n}\nfunction cloneEventNode(e) {\n  const evt = new Event(e.type, e);\n  if (\"data\" in e) {\n    evt.data = e.data;\n  }\n  if (\"code\" in e) {\n    evt.code = e.code;\n  }\n  if (\"reason\" in e) {\n    evt.reason = e.reason;\n  }\n  if (\"error\" in e) {\n    evt.error = e.error;\n  }\n  return evt;\n}\nvar isNode = typeof process !== \"undefined\" && typeof process.versions?.node !== \"undefined\" && typeof document === \"undefined\";\nvar cloneEvent = isNode ? cloneEventNode : cloneEventBrowser;\nvar DEFAULT = {\n  maxReconnectionDelay: 1e4,\n  minReconnectionDelay: 1e3 + Math.random() * 4e3,\n  minUptime: 5e3,\n  reconnectionDelayGrowFactor: 1.3,\n  connectionTimeout: 4e3,\n  maxRetries: Infinity,\n  maxEnqueuedMessages: Infinity,\n  startClosed: false,\n  debug: false\n};\nvar ReconnectingWebSocket = class _ReconnectingWebSocket extends EventTarget {\n  _ws;\n  _retryCount = -1;\n  _uptimeTimeout;\n  _connectTimeout;\n  _shouldReconnect = true;\n  _connectLock = false;\n  _binaryType = \"blob\";\n  _closeCalled = false;\n  _messageQueue = [];\n  _url;\n  _protocols;\n  _options;\n  constructor(url, protocols, options = {}) {\n    super();\n    this._url = url;\n    this._protocols = protocols;\n    this._options = options;\n    if (this._options.startClosed) {\n      this._shouldReconnect = false;\n    }\n    this._connect();\n  }\n  static get CONNECTING() {\n    return 0;\n  }\n  static get OPEN() {\n    return 1;\n  }\n  static get CLOSING() {\n    return 2;\n  }\n  static get CLOSED() {\n    return 3;\n  }\n  get CONNECTING() {\n    return _ReconnectingWebSocket.CONNECTING;\n  }\n  get OPEN() {\n    return _ReconnectingWebSocket.OPEN;\n  }\n  get CLOSING() {\n    return _ReconnectingWebSocket.CLOSING;\n  }\n  get CLOSED() {\n    return _ReconnectingWebSocket.CLOSED;\n  }\n  get binaryType() {\n    return this._ws ? this._ws.binaryType : this._binaryType;\n  }\n  set binaryType(value) {\n    this._binaryType = value;\n    if (this._ws) {\n      this._ws.binaryType = value;\n    }\n  }\n  /**\n   * Returns the number or connection retries\n   */\n  get retryCount() {\n    return Math.max(this._retryCount, 0);\n  }\n  /**\n   * The number of bytes of data that have been queued using calls to send() but not yet\n   * transmitted to the network. This value resets to zero once all queued data has been sent.\n   * This value does not reset to zero when the connection is closed; if you keep calling send(),\n   * this will continue to climb. Read only\n   */\n  get bufferedAmount() {\n    const bytes = this._messageQueue.reduce((acc, message) => {\n      if (typeof message === \"string\") {\n        acc += message.length;\n      } else if (message instanceof Blob) {\n        acc += message.size;\n      } else {\n        acc += message.byteLength;\n      }\n      return acc;\n    }, 0);\n    return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n  }\n  /**\n   * The extensions selected by the server. This is currently only the empty string or a list of\n   * extensions as negotiated by the connection\n   */\n  get extensions() {\n    return this._ws ? this._ws.extensions : \"\";\n  }\n  /**\n   * A string indicating the name of the sub-protocol the server selected;\n   * this will be one of the strings specified in the protocols parameter when creating the\n   * WebSocket object\n   */\n  get protocol() {\n    return this._ws ? this._ws.protocol : \"\";\n  }\n  /**\n   * The current state of the connection; this is one of the Ready state constants\n   */\n  get readyState() {\n    if (this._ws) {\n      return this._ws.readyState;\n    }\n    return this._options.startClosed ? _ReconnectingWebSocket.CLOSED : _ReconnectingWebSocket.CONNECTING;\n  }\n  /**\n   * The URL as resolved by the constructor\n   */\n  get url() {\n    return this._ws ? this._ws.url : \"\";\n  }\n  /**\n   * Whether the websocket object is now in reconnectable state\n   */\n  get shouldReconnect() {\n    return this._shouldReconnect;\n  }\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\n   */\n  onclose = null;\n  /**\n   * An event listener to be called when an error occurs\n   */\n  onerror = null;\n  /**\n   * An event listener to be called when a message is received from the server\n   */\n  onmessage = null;\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n   * this indicates that the connection is ready to send and receive data\n   */\n  onopen = null;\n  /**\n   * Closes the WebSocket connection or connection attempt, if any. If the connection is already\n   * CLOSED, this method does nothing\n   */\n  close(code = 1e3, reason) {\n    this._closeCalled = true;\n    this._shouldReconnect = false;\n    this._clearTimeouts();\n    if (!this._ws) {\n      this._debug(\"close enqueued: no ws instance\");\n      return;\n    }\n    if (this._ws.readyState === this.CLOSED) {\n      this._debug(\"close: already closed\");\n      return;\n    }\n    this._ws.close(code, reason);\n  }\n  /**\n   * Closes the WebSocket connection or connection attempt and connects again.\n   * Resets retry counter;\n   */\n  reconnect(code, reason) {\n    this._shouldReconnect = true;\n    this._closeCalled = false;\n    this._retryCount = -1;\n    if (!this._ws || this._ws.readyState === this.CLOSED) {\n      this._connect();\n    } else {\n      this._disconnect(code, reason);\n      this._connect();\n    }\n  }\n  /**\n   * Enqueue specified data to be transmitted to the server over the WebSocket connection\n   */\n  send(data) {\n    if (this._ws && this._ws.readyState === this.OPEN) {\n      this._debug(\"send\", data);\n      this._ws.send(data);\n    } else {\n      const { maxEnqueuedMessages = DEFAULT.maxEnqueuedMessages } = this._options;\n      if (this._messageQueue.length < maxEnqueuedMessages) {\n        this._debug(\"enqueue\", data);\n        this._messageQueue.push(data);\n      }\n    }\n  }\n  _debug(...args) {\n    if (this._options.debug) {\n      console.log.apply(console, [\"RWS>\", ...args]);\n    }\n  }\n  _getNextDelay() {\n    const {\n      reconnectionDelayGrowFactor = DEFAULT.reconnectionDelayGrowFactor,\n      minReconnectionDelay = DEFAULT.minReconnectionDelay,\n      maxReconnectionDelay = DEFAULT.maxReconnectionDelay\n    } = this._options;\n    let delay = 0;\n    if (this._retryCount > 0) {\n      delay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n      if (delay > maxReconnectionDelay) {\n        delay = maxReconnectionDelay;\n      }\n    }\n    this._debug(\"next delay\", delay);\n    return delay;\n  }\n  _wait() {\n    return new Promise((resolve) => {\n      setTimeout(resolve, this._getNextDelay());\n    });\n  }\n  _getNextProtocols(protocolsProvider) {\n    if (!protocolsProvider)\n      return Promise.resolve(null);\n    if (typeof protocolsProvider === \"string\" || Array.isArray(protocolsProvider)) {\n      return Promise.resolve(protocolsProvider);\n    }\n    if (typeof protocolsProvider === \"function\") {\n      const protocols = protocolsProvider();\n      if (!protocols)\n        return Promise.resolve(null);\n      if (typeof protocols === \"string\" || Array.isArray(protocols)) {\n        return Promise.resolve(protocols);\n      }\n      if (protocols.then) {\n        return protocols;\n      }\n    }\n    throw Error(\"Invalid protocols\");\n  }\n  _getNextUrl(urlProvider) {\n    if (typeof urlProvider === \"string\") {\n      return Promise.resolve(urlProvider);\n    }\n    if (typeof urlProvider === \"function\") {\n      const url = urlProvider();\n      if (typeof url === \"string\") {\n        return Promise.resolve(url);\n      }\n      if (url.then) {\n        return url;\n      }\n    }\n    throw Error(\"Invalid URL\");\n  }\n  _connect() {\n    if (this._connectLock || !this._shouldReconnect) {\n      return;\n    }\n    this._connectLock = true;\n    const {\n      maxRetries = DEFAULT.maxRetries,\n      connectionTimeout = DEFAULT.connectionTimeout\n    } = this._options;\n    if (this._retryCount >= maxRetries) {\n      this._debug(\"max retries reached\", this._retryCount, \">=\", maxRetries);\n      return;\n    }\n    this._retryCount++;\n    this._debug(\"connect\", this._retryCount);\n    this._removeListeners();\n    this._wait().then(\n      () => Promise.all([\n        this._getNextUrl(this._url),\n        this._getNextProtocols(this._protocols || null)\n      ])\n    ).then(([url, protocols]) => {\n      if (this._closeCalled) {\n        this._connectLock = false;\n        return;\n      }\n      const WS = this._options.WebSocket || WebSocket;\n      this._debug(\"connect\", { url, protocols });\n      this._ws = protocols ? new WS(url, protocols) : new WS(url);\n      this._ws.binaryType = this._binaryType;\n      this._connectLock = false;\n      this._addListeners();\n      this._connectTimeout = setTimeout(\n        () => this._handleTimeout(),\n        connectionTimeout\n      );\n    }).catch((err) => {\n      this._connectLock = false;\n      this._handleError(new Events.ErrorEvent(Error(err.message), this));\n    });\n  }\n  _handleTimeout() {\n    this._debug(\"timeout event\");\n    this._handleError(new Events.ErrorEvent(Error(\"TIMEOUT\"), this));\n  }\n  _disconnect(code = 1e3, reason) {\n    this._clearTimeouts();\n    if (!this._ws) {\n      return;\n    }\n    this._removeListeners();\n    try {\n      this._ws.close(code, reason);\n      this._handleClose(new Events.CloseEvent(code, reason, this));\n    } catch (error) {\n    }\n  }\n  _acceptOpen() {\n    this._debug(\"accept open\");\n    this._retryCount = 0;\n  }\n  _handleOpen = (event) => {\n    this._debug(\"open event\");\n    const { minUptime = DEFAULT.minUptime } = this._options;\n    clearTimeout(this._connectTimeout);\n    this._uptimeTimeout = setTimeout(() => this._acceptOpen(), minUptime);\n    assert(this._ws, \"WebSocket is not defined\");\n    this._ws.binaryType = this._binaryType;\n    this._messageQueue.forEach((message) => this._ws?.send(message));\n    this._messageQueue = [];\n    if (this.onopen) {\n      this.onopen(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n  _handleMessage = (event) => {\n    this._debug(\"message event\");\n    if (this.onmessage) {\n      this.onmessage(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n  _handleError = (event) => {\n    this._debug(\"error event\", event.message);\n    this._disconnect(\n      void 0,\n      event.message === \"TIMEOUT\" ? \"timeout\" : void 0\n    );\n    if (this.onerror) {\n      this.onerror(event);\n    }\n    this._debug(\"exec error listeners\");\n    this.dispatchEvent(cloneEvent(event));\n    this._connect();\n  };\n  _handleClose = (event) => {\n    this._debug(\"close event\");\n    this._clearTimeouts();\n    if (this._shouldReconnect) {\n      this._connect();\n    }\n    if (this.onclose) {\n      this.onclose(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n  _removeListeners() {\n    if (!this._ws) {\n      return;\n    }\n    this._debug(\"removeListeners\");\n    this._ws.removeEventListener(\"open\", this._handleOpen);\n    this._ws.removeEventListener(\"close\", this._handleClose);\n    this._ws.removeEventListener(\"message\", this._handleMessage);\n    this._ws.removeEventListener(\"error\", this._handleError);\n  }\n  _addListeners() {\n    if (!this._ws) {\n      return;\n    }\n    this._debug(\"addListeners\");\n    this._ws.addEventListener(\"open\", this._handleOpen);\n    this._ws.addEventListener(\"close\", this._handleClose);\n    this._ws.addEventListener(\"message\", this._handleMessage);\n    this._ws.addEventListener(\"error\", this._handleError);\n  }\n  _clearTimeouts() {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._uptimeTimeout);\n  }\n};\n\nexport {\n  ErrorEvent,\n  CloseEvent,\n  ReconnectingWebSocket\n};\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n */\n", "import {\n  ReconnectingWebSocket\n} from \"./chunk-KQKM3KLR.mjs\";\n\n// src/index.ts\nvar valueIsNotNil = (keyValuePair) => keyValuePair[1] !== null && keyValuePair[1] !== void 0;\nfunction generateUUID() {\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\n    return crypto.randomUUID();\n  }\n  let d = (/* @__PURE__ */ new Date()).getTime();\n  let d2 = typeof performance !== \"undefined\" && performance.now && performance.now() * 1e3 || 0;\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    let r = Math.random() * 16;\n    if (d > 0) {\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : r & 3 | 8).toString(16);\n  });\n}\nfunction getPartyInfo(partySocketOptions, defaultProtocol, defaultParams = {}) {\n  const {\n    host: rawHost,\n    path: rawPath,\n    protocol: rawProtocol,\n    room,\n    party,\n    query\n  } = partySocketOptions;\n  let host = rawHost.replace(/^(http|https|ws|wss):\\/\\//, \"\");\n  if (host.endsWith(\"/\")) {\n    host = host.slice(0, -1);\n  }\n  if (rawPath && rawPath.startsWith(\"/\")) {\n    throw new Error(\"path must not start with a slash\");\n  }\n  const name = party ?? \"main\";\n  const path = rawPath ? `/${rawPath}` : \"\";\n  const protocol = rawProtocol || (host.startsWith(\"localhost:\") || host.startsWith(\"127.0.0.1:\") ? (\n    // http / ws\n    defaultProtocol\n  ) : (\n    // https / wss\n    defaultProtocol + \"s\"\n  ));\n  const baseUrl = `${protocol}://${host}/${party ? `parties/${party}` : \"party\"}/${room}${path}`;\n  const makeUrl = (query2 = {}) => `${baseUrl}?${new URLSearchParams([\n    ...Object.entries(defaultParams),\n    ...Object.entries(query2).filter(valueIsNotNil)\n  ])}`;\n  const urlProvider = typeof query === \"function\" ? async () => makeUrl(await query()) : makeUrl(query);\n  return {\n    host,\n    path,\n    room,\n    name,\n    protocol,\n    partyUrl: baseUrl,\n    urlProvider\n  };\n}\nvar PartySocket = class extends ReconnectingWebSocket {\n  constructor(partySocketOptions) {\n    const {\n      id,\n      host: _host,\n      path: _path,\n      party: _party,\n      room: _room,\n      protocol: _protocol,\n      query: _query,\n      protocols,\n      ...socketOptions\n    } = partySocketOptions;\n    const _pk = id || generateUUID();\n    const party = getPartyInfo(partySocketOptions, \"ws\", { _pk });\n    super(party.urlProvider, protocols, socketOptions);\n    this.partySocketOptions = partySocketOptions;\n    this._pk = _pk;\n    this._pkurl = party.partyUrl;\n    this.name = party.name;\n    this.room = party.room;\n    this.host = party.host;\n    this.path = party.path;\n  }\n  _pk;\n  _pkurl;\n  name;\n  room;\n  host;\n  path;\n  get id() {\n    return this._pk;\n  }\n  /**\n   * Exposes the static PartyKit room URL without applying query parameters.\n   * To access the currently connected WebSocket url, use PartySocket#url.\n   */\n  get roomUrl() {\n    return this._pkurl;\n  }\n  // a `fetch` method that uses (almost) the same options as `PartySocket`\n  static async fetch(options, init) {\n    const party = getPartyInfo(options, \"http\");\n    const url = typeof party.urlProvider === \"string\" ? party.urlProvider : await party.urlProvider();\n    const doFetch = options.fetch ?? fetch;\n    return doFetch(url, init);\n  }\n};\n\nexport {\n  PartySocket\n};\n", "/* eslint-env browser */\n/* global PARTYKIT_HOST */\n\nimport \"./styles.css\";\n\nimport PartySocket from \"partysocket\";\n\nlet pingInterval;\n\n/** @type {HTMLDivElement} - The DOM element to append all messages we get */\nconst output = document.getElementById(\"app\");\n\n/**\n * Helper function to add a new line to the DOM\n * @param {string} text - The text to be added\n */\nfunction add(text) {\n  output.appendChild(document.createTextNode(text));\n  output.appendChild(document.createElement(\"br\"));\n}\n\n\n/**\n * A PartySocket is like a WebSocket, but with more features.\n * It handles reconnection logic, buffering messages while it's offline, etc.\n * @type {PartySocket} - The connection object\n */\nconst conn = new PartySocket({\n  host: PARTYKIT_HOST,\n  room: \"my-new-room\",\n});\n\n/**\n * Event listener to handle received messages.\n * @param {Event} event - The message event\n */\nconn.addEventListener(\"message\", function (event) {\n  add(`Received -> ${event.data}`);\n});\n\n/**\n * Event listener for when the connection opens.\n */\n\nconst getBot1 = document.getElementById('bot1')\ngetBot1.addEventListener('click', () => {\n\n  pingInterval = setTimeout(function () {\n    conn.addEventListener(\"message\", function (event) {\n        add(`Forward -> ${event.data}`);\n      });\n      add(`Forward -> ${event.data}`);\n    add('Forward');\n   \n  }, 900);\n\n});\n\nconst getBot2 = document.getElementById('bot2')\ngetBot2.addEventListener('click', () => {\n\n  pingInterval = setTimeout(function () {\n\n    add('Backward');\n   \n  }, 500);\n\n});\nconst getBot3 = document.getElementById('bot3')\ngetBot3.addEventListener('click', () => {\n\n  pingInterval = setTimeout(function () {\n\n    add('Right');\n   \n  }, 500);\n\n});\n\nconst getBot4 = document.getElementById('bot4')\ngetBot4.addEventListener('click', () => {\n\n  pingInterval = setTimeout(function () {\n\n    add('Left');\n   \n  }, 500);\n\n});\n\ngetBot2.removeEventListener()\ngetBot3.removeEventListener()\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": ["event", "event"]
}
